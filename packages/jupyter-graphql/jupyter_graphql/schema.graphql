"""
An object with a globally unique `ID`.
"""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
}

"""
A location in a connection that can be used for resuming pagination.
"""
scalar Cursor

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: Cursor

  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: Cursor
}

"""
JSON serialized as a string.
"""
scalar JSON

type Query {
  node(id: ID!): Node
  execution(id: ID!): Execution
}

type Execution implements Node {
  id: ID!
  code: String!
  status: ExecutionStatus!
  displays: [Display!]!
}

union ExecutionStatus =
    ExecutionStatusOK
  | ExecutionStatusAbort
  | ExecutionStatusError
  | ExecutionStatusPending

type ExecutionStatusOK {
  executionCount: Int
  result: ExecutionResult
}

type ExecutionResult {
  data: JSON!
  metadata: JSON!
}

type ExecutionStatusError {
  name: String!
  value: String!
  traceback: [String!]!
}

type ExecutionStatusAbort {
  _: Boolean
}

type ExecutionStatusPending {
  _: Boolean
}

union Display = DisplayStream | DisplayData

enum DisplayStreamName {
  STDOUT
  STDERR
}

type DisplayStream {
  name: DisplayStreamName!
  text: String!
}

type DisplayData {
  data: JSON!
  metadata: JSON!
  displayID: String
}
