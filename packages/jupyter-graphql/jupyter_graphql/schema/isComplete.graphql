extend type Mutation {
  """
  Asks a kernel if the code is complete.

  When the user enters a line in a console style interface, the console must decide whether to immediately execute the current code, or whether to show a continuation prompt for further input. For instance, in Python `a = 5` would be executed immediately, while `for i in range(5):` would expect further input.
  """
  isComplete(input: IsCompleteInput!): IsCompletePayload
}

input IsCompleteInput {
  """
  The code entered so far as a multiline string
  """
  code: String!
}

type IsCompletePayload {
  reply: CompleteReply!
}

union IsCompleteReply = IsCompleteOK | ShellAbort | ShellError

type IsCompleteOK {
  status: IsCompleteOKStatus
}
union IsCompleteOKStatus =
    IsCompleteStatusComplete
  | IsCompleteStatusIncomplete
  | IsCompleteStatusInvalid
  | IsCompleteStatusUnknown

"""
code is ready to be executed
"""
type IsCompleteStatusComplete {
  _: Boolean
}

"""
code should prompt for another line
"""
type IsCompleteStatusIncomplete {
  """
  the characters to use
  to indent the next line. This is only a hint: frontends may ignore it
  and use their own autoindentation rules. For other statuses, this
  field does not exist.
  """
  indent: String
}

"""
code will typically be sent for execution, so that the user sees the error soonest.
"""
type IsCompleteStatusInvalid {
  _: Boolean
}

"""
the kernel is not able to determine this. The frontend should also handle the kernel not replying promptly. It may default to sending the code for execution, or it may implement simple fallback heuristics for whether to execute the code (e.g. execute after a blank line).
"""
type IsCompleteStatusUnknown {
  _: Boolean
}
